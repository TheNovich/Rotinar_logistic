'–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pyTelegramBotApi'
from telebot import types

from app.bot.utils import role_required, search_number, on_click_manager_panel, user_verification, supabase, on_click_driver_panel

'–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–Ω–∞–ª–∞'
from app.database.crud import set_role_db
from app.bot.utils import save_order_to_db
'''from app.bot.utils import format_order
from app.bot.utils import create_order
from app.bot.utils import temp_orders'''
from app.bot.order_creation import create_order, temp_orders, format_order
from config import config
from app.bot.utils import safe_send_message

from app.bot.instance import bot


'–û–±–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω—ã /set_role —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
@bot.message_handler(commands=['set_role'])
@role_required('admin')
def set_role(message):
    try:
        _, phone, new_role = message.text.split()
        if search_number(phone) == 0:
            safe_send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        set_role_db(new_role, phone)
        safe_send_message(message.chat.id, f"‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone} —Ç–µ–ø–µ—Ä—å {new_role}")
    except:
        safe_send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role [phone] [role]")

'–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manager_panel –≤—ã–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–æ–ª–∏ manager'

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_verification(message, driver_panel, manager_panel)


@bot.message_handler(commands=['manager_panel'])
@role_required('manager', 'admin')
def manager_panel(message):
    markup = types.ReplyKeyboardMarkup()
    buttons = []
    buttons.append(types.KeyboardButton('–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏'))
    buttons.append(types.KeyboardButton('–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏'))
    if config.USE_NEW_ORDER_FLOW:
        buttons.append(types.KeyboardButton('üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'))
    markup.row(*buttons)
    safe_send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: on_click_manager_panel(msg, manager_panel))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith(('confirm_order_', 'restart_order_')))
def handle_order_confirmation(call):
    chat_id = call.data.split('_')[-1]
    order_data = temp_orders.get(int(chat_id))

    if not order_data:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    if call.data.startswith('confirm_order_'):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = save_order_to_db(order_data)

        safe_send_message(
            call.message.chat.id,
            f"‚úÖ *–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n{format_order(order_data)}",
            parse_mode="Markdown",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if int(chat_id) in temp_orders:
            del temp_orders[int(chat_id)]
        manager_panel(call.message)

    else:  # restart_order
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if int(chat_id) in temp_orders:
            del temp_orders[int(chat_id)]
        create_order(call.message, manager_panel)

    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['driver_panel'])
@role_required('driver', 'admin')
def driver_panel(message):
    markup = types.ReplyKeyboardMarkup()
    is_on_shift = supabase.table('users').select('is_on_shift').eq('telegram_id', message.from_user.id).execute()
    driver_state = supabase.table('users').select('state_id').eq('telegram_id', message.from_user.id).execute()
    if is_on_shift.data[0]['is_on_shift'] == False:
        driver_start_button = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É üöÄ')
        markup.row(driver_start_button)
        safe_send_message(message.chat.id, '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É!')
    else:
        driver_finish_button = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É üèÅ')
        driver_—Åancel_order_button = types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå')

        if driver_state.data[0]['state_id'] == 1:
            driver_loading_car_button = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
            markup.row(driver_loading_car_button)
            markup.row(driver_—Åancel_order_button)
        elif driver_state.data[0]['state_id'] == 2:
            driver_loading_car_button = types.KeyboardButton('–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏')
            markup.row(driver_loading_car_button)
            markup.row(driver_—Åancel_order_button)
        elif driver_state.data[0]['state_id'] == 3:
            driver_loading_car_button = types.KeyboardButton('–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
            markup.row(driver_loading_car_button)
            markup.row(driver_—Åancel_order_button)
        elif driver_state.data[0]['state_id'] == 4:
            driver_loading_car_button = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑')
            markup.row(driver_loading_car_button)
            markup.row(driver_—Åancel_order_button)
        elif driver_state.data[0]['state_id'] == 5:
            driver_take_order_button = types.KeyboardButton('–í–∑—è—Ç—å –∑–∞–∫–∞–∑')
            markup.row(driver_take_order_button)
            markup.row(driver_finish_button)



    safe_send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: on_click_driver_panel(msg, driver_panel))
