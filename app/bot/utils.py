import time
from requests.exceptions import ConnectionError, ReadTimeout
from telebot.apihelper import ApiException

'–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pyTelegramBotApi'
from telebot.types import Message
from telebot import types
from telebot.handler_backends import State, StatesGroup
from app.bot.order_creation import create_order


'from handlers import manager_panel'

'–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –î–ë'
from app.database.crud import check_user_role, search_number, update_data_tg_id, switch_driver_status, switch_driver_shift, supabase
'from app.bot.handlers import driver_panel, manager_panel'

from app.bot.instance import bot


def safe_send_message(chat_id, text, max_retries=3, retry_delay=2, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –í–°–ï –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ send_message:
    - reply_markup
    - parse_mode
    - disable_web_page_preview
    - reply_to_message_id
    - –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        retry_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
        **kwargs: –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message
    """
    for attempt in range(max_retries):
        try:
            return bot.send_message(chat_id, text, **kwargs)

        except (ConnectionResetError, ApiException) as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {type(e).__name__} - {e}")

            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è backoff-–∑–∞–¥–µ—Ä–∂–∫–∞
            delay = retry_delay * (2 ** attempt)
            time.sleep(delay)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {type(e).__name__} - {e}")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return None

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def save_order_to_db(order_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    import random
    return random.randint(1000, 9999)

'–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π'
def role_required(*allowed_roles):
    def decorator(func):
        def wrapper(message: Message, *args, **kwargs):
            user_role = check_user_role(message.from_user.id)
            if user_role not in allowed_roles:
                safe_send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                return
            return func(message, *args, **kwargs)

        return wrapper

    return decorator

'–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–¥'
def process_phone(message, driver_panel, manager_panel):
    phone = message.text
    if not phone.isdigit() or len(phone) != 11:
        safe_send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        registration(message, driver_panel, manager_panel)
    elif search_number(phone) == 0:
        safe_send_message(message.chat.id, '‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
        registration(message, driver_panel, manager_panel)
    else:
        update_data_tg_id('users', {
            'telegram_id': message.from_user.id,
            'telegram_name': message.from_user.username
        }, phone)
        user_verification(message, driver_panel, manager_panel)


def on_click_driver_panel(message, driver_panel):
    if message.text == '–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É üöÄ':
        start_driver_shift(message)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É üèÅ':
        finish_driver_shift(message)
    elif message.text == '–í–∑—è—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 1, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É! \n–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É')
    elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 2, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏"')
    elif message.text == '–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏':
        driver_next_status(message, 3, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø—É—Ç–∏ –≤ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"')
    elif message.text == '–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 4, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è. \n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"')
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 5, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑. \n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞')
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå':
        driver_next_status(message,5, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω, –≤–∞—à —Å—Ç–∞—Ç—É—Å "–°–≤–æ–±–æ–¥–µ–Ω"')


    driver_panel(message)

def driver_next_status(message, next_status_id, message_to_user):
    switch_driver_status(next_status_id, message.from_user.id)
    safe_send_message(message.chat.id, message_to_user)

def start_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(True, tg_id)
    switch_driver_status(5, tg_id)
    safe_send_message(message.chat.id, '–í—ã –Ω–∞ —Å–º–µ–Ω–µ!')

def finish_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(False, tg_id)
    switch_driver_status(5, tg_id)
    safe_send_message(tg_id, '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

def registration(message, driver_panel, manager_panel):
    msg = safe_send_message(message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89991112233 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤):')
    bot.register_next_step_handler(msg, lambda msg: process_phone(msg, driver_panel, manager_panel))

def role_commands(message, role, driver_panel, manager_panel):
    if role == 'driver':
        driver_panel(message)
    elif role == 'manager':
        manager_panel(message)


def on_click_manager_panel(message, manager_panel):
    def convert_to_international(phone):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä 8... –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç +7..."""
        if phone.startswith('8') and len(phone) == 11:
            return '+7' + phone[1:]
        return phone

    if message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏':
        free_drivers = supabase.table('users') \
            .select('last_name', 'first_name', 'surname', 'phone_number', 'state_id') \
            .eq('role', 'driver') \
            .eq('state_id', 5) \
            .eq('is_on_shift', True) \
            .execute()

        drivers_list = []
        for driver in free_drivers.data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            international_phone = convert_to_international(driver['phone_number'])
            phone_link = f"<a href='tel:{international_phone}'>{international_phone}</a>"

            driver_info = (
                f"{driver['last_name']} "
                f"{driver['first_name']} "
                f"{driver['surname']}\n"
                f"{phone_link}\n"
                f"–°–≤–æ–±–æ–¥–µ–Ω‚úÖ\n"
                "-------------------------"
            )
            drivers_list.append(driver_info)

        if drivers_list:
            response = "–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n\n" + "\n".join(drivers_list)
        else:
            response = "–°–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç"

        safe_send_message(message.chat.id, response, parse_mode='HTML')
        manager_panel(message)

    elif message.text == '–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏':
        all_drivers = supabase.table('users') \
            .select('last_name', 'first_name', 'surname', 'phone_number', 'state_id') \
            .eq('role', 'driver') \
            .eq('is_on_shift', True) \
            .in_('state_id', [1, 2, 3, 4, 5]) \
            .execute()

        status_names = {
            1: "–í—ã–¥–≤–∏–Ω—É–ª—Å—è –Ω–∞ –ø–æ–≥—Ä—É–∑–∫—É üöò",
            2: "–ü–æ–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ü™ù",
            3: "–ï–¥–µ—Ç –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É üö®",
            4: "–í—ã–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è üîÑ",
            5: "–°–≤–æ–±–æ–¥–µ–Ω ‚úÖ"
        }

        drivers_list = []
        for driver in all_drivers.data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            international_phone = convert_to_international(driver['phone_number'])
            phone_link = f"<a href='tel:{international_phone}'>{international_phone}</a>"
            status = status_names.get(driver['state_id'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

            driver_info = (
                f"{driver['last_name']} "
                f"{driver['first_name']} "
                f"{driver['surname']}\n"
                f"{phone_link}\n"
                f"{status}\n"
                "-------------------------"
            )
            drivers_list.append(driver_info)

        if drivers_list:
            response = "–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n\n" + "\n".join(drivers_list)
        else:
            response = "–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        safe_send_message(message.chat.id, response, parse_mode='HTML')
        manager_panel(message)

    elif message.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑':
        create_order(message, manager_panel)

    else:
        safe_send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        manager_panel(message)

def user_verification(message, driver_panel, manager_panel):
    response = supabase.table('users').select('telegram_id', count='exact').eq('telegram_id', message.chat.id).execute()
    if response.count != 0:
        role = check_user_role(message.chat.id)
        safe_send_message(message.chat.id, f'‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à–∞ —Ä–æ–ª—å: {role}')
        role_commands(message, role, driver_panel, manager_panel)
    else:
        registration(message, driver_panel, manager_panel)

def convert_to_international(phone):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä 8... –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç +7..."""
    if phone.startswith('8') and len(phone) == 11:
        return '+7' + phone[1:]
    return phone  # –ï—Å–ª–∏ —É–∂–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ