import time
from requests.exceptions import ConnectionError, ReadTimeout
from telebot.apihelper import ApiException

'–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pyTelegramBotApi'
from telebot.types import Message
from telebot import types
from telebot.handler_backends import State, StatesGroup
from app.bot.order_creation import create_order


'from handlers import manager_panel'

'–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –î–ë'
from app.database.crud import check_user_role, search_number, update_data_tg_id, switch_driver_status, switch_driver_shift, supabase
'from app.bot.handlers import driver_panel, manager_panel'

from app.bot.instance import bot

temp_new_users = {}
temp_delete_users = {}


def safe_send_message(chat_id, text, max_retries=3, retry_delay=2, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –í–°–ï –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ send_message:
    - reply_markup
    - parse_mode
    - disable_web_page_preview
    - reply_to_message_id
    - –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        retry_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)
        **kwargs: –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è send_message
    """
    for attempt in range(max_retries):
        try:
            return bot.send_message(chat_id, text, **kwargs)

        except (ConnectionResetError, ApiException) as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {type(e).__name__} - {e}")

            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è backoff-–∑–∞–¥–µ—Ä–∂–∫–∞
            delay = retry_delay * (2 ** attempt)
            time.sleep(delay)

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {type(e).__name__} - {e}")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    return None

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)
def save_order_to_db(order_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    import random
    return random.randint(1000, 9999)

'–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π'
def role_required(*allowed_roles):
    def decorator(func):
        def wrapper(message: Message, *args, **kwargs):
            user_role = check_user_role(message.from_user.id)
            if user_role not in allowed_roles:
                safe_send_message(message.chat.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
                return
            return func(message, *args, **kwargs)

        return wrapper

    return decorator

'–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–¥'
def process_phone(message, driver_panel, manager_panel):
    phone = message.text
    if not phone.isdigit() or len(phone) != 11:
        safe_send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        registration(message, driver_panel, manager_panel)
    elif search_number(phone) == 0:
        safe_send_message(message.chat.id, '‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!')
        registration(message, driver_panel, manager_panel)
    else:
        update_data_tg_id('users', {
            'telegram_id': message.from_user.id,
            'telegram_name': message.from_user.username
        }, phone)
        user_verification(message, driver_panel, manager_panel)


def on_click_driver_panel(message, driver_panel):
    if message.text == '–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É üöÄ':
        start_driver_shift(message)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É üèÅ':
        finish_driver_shift(message)
    elif message.text == '–í–∑—è—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 1, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É! \n–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É')
    elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 2, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏"')
    elif message.text == '–í—ã–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏':
        driver_next_status(message, 3, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø—É—Ç–∏ –≤ —Ç–æ—á–∫—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. \n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"')
    elif message.text == '–†–∞–∑–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è':
        driver_next_status(message, 4, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è. \n–ü–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è —Å–º–µ–Ω–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"')
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑':
        driver_next_status(message, 5, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑. \n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞')
    elif message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå':
        driver_next_status(message,5, '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω, –≤–∞—à —Å—Ç–∞—Ç—É—Å "–°–≤–æ–±–æ–¥–µ–Ω"')
    elif message.text == '–ü–µ—Ä–µ—Ä—ã–≤ ‚è∏Ô∏è':
        driver_next_status(message, 6, '–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ')
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ ‚ñ∂Ô∏è':
        driver_next_status(message, 5, '–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω, –≤–∞—à —Å—Ç–∞—Ç—É—Å "–°–≤–æ–±–æ–¥–µ–Ω"')


    driver_panel(message)

def driver_next_status(message, next_status_id, message_to_user):
    switch_driver_status(next_status_id, message.from_user.id)
    safe_send_message(message.chat.id, message_to_user)

def start_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(True, tg_id)
    switch_driver_status(5, tg_id)
    safe_send_message(message.chat.id, '–í—ã –Ω–∞ —Å–º–µ–Ω–µ!')

def finish_driver_shift(message):
    tg_id = message.from_user.id
    switch_driver_shift(False, tg_id)
    switch_driver_status(5, tg_id)
    safe_send_message(tg_id, '–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

def registration(message, driver_panel, manager_panel):
    msg = safe_send_message(message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89991112233 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤):')
    bot.register_next_step_handler(msg, lambda msg: process_phone(msg, driver_panel, manager_panel))

def role_commands(message, role, driver_panel, manager_panel, admin_panel):
    if role == 'driver':
        driver_panel(message)
    elif role == 'manager':
        manager_panel(message)
    elif role == 'admin':
        admin_panel(message)


def on_click_manager_panel(message, manager_panel, admin_panel):
    def convert_to_international(phone):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä 8... –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç +7..."""
        if phone.startswith('8') and len(phone) == 11:
            return '+7' + phone[1:]
        return phone

    if message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏':
        free_drivers = supabase.table('users') \
            .select('last_name', 'first_name', 'surname', 'phone_number', 'state_id') \
            .eq('role', 'driver') \
            .eq('state_id', 5) \
            .eq('is_on_shift', True) \
            .execute()

        drivers_list = []
        for driver in free_drivers.data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            international_phone = convert_to_international(driver['phone_number'])
            phone_link = f"<a href='tel:{international_phone}'>{international_phone}</a>"

            driver_info = (
                f"{driver['last_name']} "
                f"{driver['first_name']} "
                f"{driver['surname']}\n"
                f"{phone_link}\n"
                f"–°–≤–æ–±–æ–¥–µ–Ω‚úÖ\n"
                "-------------------------"
            )
            drivers_list.append(driver_info)

        if drivers_list:
            response = "–°–≤–æ–±–æ–¥–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n\n" + "\n".join(drivers_list)
        else:
            response = "–°–≤–æ–±–æ–¥–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç"

        safe_send_message(message.chat.id, response, parse_mode='HTML')
        manager_panel(message)

    elif message.text == '–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏':
        all_drivers = supabase.table('users') \
            .select('last_name', 'first_name', 'surname', 'phone_number', 'state_id') \
            .eq('role', 'driver') \
            .eq('is_on_shift', True) \
            .in_('state_id', [1, 2, 3, 4, 5, 6]) \
            .execute()

        status_names = {
            1: "–í—ã–¥–≤–∏–Ω—É–ª—Å—è –Ω–∞ –ø–æ–≥—Ä—É–∑–∫—É üöò",
            2: "–ü–æ–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è ü™ù",
            3: "–ï–¥–µ—Ç –Ω–∞ –≤—ã–≥—Ä—É–∑–∫—É üö®",
            4: "–í—ã–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è üîÑ",
            5: "–°–≤–æ–±–æ–¥–µ–Ω ‚úÖ",
            6: "–ü–µ—Ä–µ—Ä—ã–≤ ‚è∏Ô∏è"
        }

        drivers_list = []
        for driver in all_drivers.data:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            international_phone = convert_to_international(driver['phone_number'])
            phone_link = f"<a href='tel:{international_phone}'>{international_phone}</a>"
            status = status_names.get(driver['state_id'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

            driver_info = (
                f"{driver['last_name']} "
                f"{driver['first_name']} "
                f"{driver['surname']}\n"
                f"{phone_link}\n"
                f"{status}\n"
                "-------------------------"
            )
            drivers_list.append(driver_info)

        if drivers_list:
            response = "–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏:\n\n" + "\n".join(drivers_list)
        else:
            response = "–í–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        safe_send_message(message.chat.id, response, parse_mode='HTML')
        manager_panel(message)

    elif message.text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑':
        create_order(message, manager_panel)

    elif message.text == '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞':
        admin_panel(message)
        return

    else:
        safe_send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
        manager_panel(message)

def on_click_admin_panel(message, admin_panel, manager_panel):
    message_text = message.text
    if message_text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        create_new_user(message)
    elif message_text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        delete_user(message)
    elif message_text == '–ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞':
        manager_panel(message)
        return
    else:
        admin_panel(message)


def create_new_user(message):
    chat_id = message.chat.id
    temp_new_users[chat_id] = {'step': 'fio'}

    # –û—á–∏—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    safe_send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"',
                      reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_new_user_fio)


def process_new_user_fio(message):
    chat_id = message.chat.id
    fio = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞)
    fio_parts = fio.split()
    if len(fio_parts) < 2:
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û! –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.',
                          reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_new_user_fio)
        return

    temp_new_users[chat_id]['fio'] = fio
    temp_new_users[chat_id]['step'] = 'phone'
    safe_send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89998887766"',
                      reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_new_user_phone)


def process_new_user_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.isdigit() or len(phone) != 11 or not phone.startswith('8'):
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.',
                          reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_new_user_phone)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if search_number(phone) > 0:
        safe_send_message(chat_id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
                          reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_new_user_phone)
        return

    temp_new_users[chat_id]['phone'] = phone
    temp_new_users[chat_id]['step'] = 'role'

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton('–º–µ–Ω–µ–¥–∂–µ—Ä'))
    markup.add(types.KeyboardButton('–≤–æ–¥–∏—Ç–µ–ª—å'))
    markup.add(types.KeyboardButton('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))

    safe_send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=markup)
    bot.register_next_step_handler(message, process_new_user_role)


def process_new_user_role(message):
    chat_id = message.chat.id
    role_text = message.text.strip().lower()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
    if role_text not in ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']:
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('–º–µ–Ω–µ–¥–∂–µ—Ä'))
        markup.add(types.KeyboardButton('–≤–æ–¥–∏—Ç–µ–ª—å'))
        markup.add(types.KeyboardButton('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))
        safe_send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', reply_markup=markup)
        bot.register_next_step_handler(message, process_new_user_role)
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    role_map = {
        '–º–µ–Ω–µ–¥–∂–µ—Ä': 'manager',
        '–≤–æ–¥–∏—Ç–µ–ª—å': 'driver',
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'admin'
    }
    role = role_map[role_text]

    temp_new_users[chat_id]['role'] = role
    temp_new_users[chat_id]['role_text'] = role_text

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    show_confirmation(chat_id, message)


def show_confirmation(chat_id, message):
    user_data = temp_new_users.get(chat_id, {})
    fio = user_data.get('fio', '')
    phone = user_data.get('phone', '')
    role_text = user_data.get('role_text', '')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'), types.KeyboardButton('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'))
    markup.row(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    confirmation_message = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–§–ò–û: {fio}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
        f"–†–æ–ª—å: {role_text}"
    )

    safe_send_message(chat_id, confirmation_message, reply_markup=markup)
    bot.register_next_step_handler(message, handle_confirmation)


def handle_confirmation(message):
    chat_id = message.chat.id
    choice = message.text.strip()

    if choice == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = temp_new_users.get(chat_id, {})
        fio = user_data.get('fio', '')
        phone = user_data.get('phone', '')
        role = user_data.get('role', '')

        # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
        fio_parts = fio.split()
        last_name = fio_parts[0]
        first_name = fio_parts[1] if len(fio_parts) > 1 else ''
        surname = fio_parts[2] if len(fio_parts) > 2 else ''

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            from app.database.crud import create_user
            create_user(phone, first_name, last_name, surname, role)
            safe_send_message(chat_id, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                              reply_markup=types.ReplyKeyboardRemove())
        except Exception as e:
            safe_send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                              reply_markup=types.ReplyKeyboardRemove())
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            if chat_id in temp_new_users:
                del temp_new_users[chat_id]
            create_new_user(message)
            return

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if chat_id in temp_new_users:
            del temp_new_users[chat_id]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from app.bot.handlers import admin_panel
        admin_panel(message)

    elif choice == '–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton('–§–ò–û'))
        markup.row(types.KeyboardButton('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'))
        markup.row(types.KeyboardButton('–†–æ–ª—å'))
        markup.row(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'))

        safe_send_message(chat_id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, handle_edit_choice)

    elif choice == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ':
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if chat_id in temp_new_users:
            del temp_new_users[chat_id]

        safe_send_message(chat_id, '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                          reply_markup=types.ReplyKeyboardRemove())

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from app.bot.handlers import admin_panel
        admin_panel(message)

    else:
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.')
        show_confirmation(chat_id, message)


def handle_edit_choice(message):
    chat_id = message.chat.id
    choice = message.text.strip()

    if choice == '–§–ò–û':
        temp_new_users[chat_id]['step'] = 'fio'
        safe_send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_new_user_fio)

    elif choice == '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
        temp_new_users[chat_id]['step'] = 'phone'
        safe_send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_new_user_phone)

    elif choice == '–†–æ–ª—å':
        temp_new_users[chat_id]['step'] = 'role'
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('–º–µ–Ω–µ–¥–∂–µ—Ä'))
        markup.add(types.KeyboardButton('–≤–æ–¥–∏—Ç–µ–ª—å'))
        markup.add(types.KeyboardButton('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))
        safe_send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:', reply_markup=markup)
        bot.register_next_step_handler(message, process_new_user_role)

    elif choice == '–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        show_confirmation(chat_id, message)

    else:
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton('–§–ò–û'))
        markup.row(types.KeyboardButton('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'))
        markup.row(types.KeyboardButton('–†–æ–ª—å'))
        markup.row(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'))
        safe_send_message(chat_id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, handle_edit_choice)

def convert_to_international(phone):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä 8... –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç +7..."""
    if phone.startswith('8') and len(phone) == 11:
        return '+7' + phone[1:]
    return phone  # –ï—Å–ª–∏ —É–∂–µ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ

def user_verification(message, driver_panel, manager_panel, admin_panel):
    response = supabase.table('users').select('telegram_id', count='exact').eq('telegram_id', message.chat.id).execute()
    if response.count != 0:
        role = check_user_role(message.chat.id)
        safe_send_message(message.chat.id, f'‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–∞—à–∞ —Ä–æ–ª—å: {role}')
        role_commands(message, role, driver_panel, manager_panel, admin_panel)
    else:
        registration(message, driver_panel, manager_panel, admin_panel)


def delete_user(message):
    chat_id = message.chat.id
    temp_delete_users[chat_id] = {'step': 'phone'}

    # –û—á–∏—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))

    safe_send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "89998887766":',
                      reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_user_phone)


def process_delete_user_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    if phone == '–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        safe_send_message(chat_id, '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                          reply_markup=types.ReplyKeyboardRemove())
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from app.bot.handlers import admin_panel
        admin_panel(message)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.isdigit() or len(phone) != 11 or not phone.startswith('8'):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.', reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_user_phone)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if search_number(phone) == 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        safe_send_message(chat_id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!', reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_user_phone)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = supabase.table('users').select('*').eq('phone_number', phone).execute()
    if not user_info.data:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        safe_send_message(chat_id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!', reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_user_phone)
        return

    user_data = user_info.data[0]
    temp_delete_users[chat_id]['user_data'] = user_data
    temp_delete_users[chat_id]['step'] = 'confirmation'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    fio = f"{user_data.get('last_name', '')} {user_data.get('first_name', '')} {user_data.get('surname', '')}"
    role = user_data.get('role', '')
    phone = user_data.get('phone_number', '')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('–î–∞, —è –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω'))
    markup.row(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))

    confirmation_message = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"–§–ò–û: {fio}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n"
        f"–†–æ–ª—å: {role}\n\n"
        f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?"
    )

    safe_send_message(chat_id, confirmation_message, reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_confirmation)


def process_delete_confirmation(message):
    chat_id = message.chat.id
    confirmation = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    if confirmation == '–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        safe_send_message(chat_id, '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                          reply_markup=types.ReplyKeyboardRemove())
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from app.bot.handlers import admin_panel
        admin_panel(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if confirmation != '–î–∞, —è –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton('–î–∞, —è –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω'))
        markup.row(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
        safe_send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.', reply_markup=markup)
        bot.register_next_step_handler(message, process_delete_confirmation)
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_data = temp_delete_users[chat_id].get('user_data', {})
    phone = user_data.get('phone_number', '')

    try:
        from app.database.crud import delete_user_db
        delete_user_db(phone)

        fio = f"{user_data.get('last_name', '')} {user_data.get('first_name', '')} {user_data.get('surname', '')}"
        safe_send_message(chat_id, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
                          reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        safe_send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}',
                          reply_markup=types.ReplyKeyboardRemove())
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if chat_id in temp_delete_users:
            del temp_delete_users[chat_id]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from app.bot.handlers import admin_panel
        admin_panel(message)